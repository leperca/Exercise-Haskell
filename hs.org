#+TITLE: Questions in Haskell exerciese

* Lists
In order to work with ghci using multi-lines definition of function
we first enter in,  
#+BEGIN_SRC haskell
:set +m
#+END_SRC

** Find the last element of a list.
- Example:
  #+BEGIN_SRC text
   > myLast [1,2,3,4]
     4
   > myLast ['x','y','z']
     'z'
  #+END_SRC

- Answer:
  #+BEGIN_SRC haskell
  :set +m
  let myLast :: [a] -> a
      myLast [x] = x
      myLast (x:xs) = myLast xs
  (myLast [1,2,3,4],myLast ['x','y','z'])
  #+END_SRC

- Result: (4,'z')
  
** Find the last but one element of a list
- Example:
  #+BEGIN_SRC text
> myButLast [1,2,3,4]
  3
> myButLast ['a'..'z']
  'y'
  #+END_SRC
  
- Answer:
  #+BEGIN_SRC haskell
:set +m
let myButLast :: [a] -> a
    myButLast [x,y]  = x
    myButLast (x:xs) = myButLast xs

(myButLast [1,2,3,4],myButLast ['a'..'z'])
  #+END_SRC

- Result: (3,'y')

** Find the K'th element of a list. 
The first element in the list is nuber 1.

- Example:
  #+BEGIN_SRC text
> elementAt [1,2,3] 2
  c 
> elementAt "hakell" 5
  'e'
  #+END_SRC
  
- Answer:
  #+BEGIN_SRC haskell
:set +m
let elementAt :: Int -> [a] -> a
    elementAt 1 (x:xs) = x
    elementAt n (x:xs) = elementAt (n-1) xs

(elementAt 2 [1,2,3], elementAt 5 "haskell")
  #+END_SRC

- Results: (2,'e')

** Find the number of elements of a list.
   
- Example:
  #+BEGIN_SRC text
> myLength [123, 456, 789]
  3
> myLength "Hello, world!"
  13
  #+END_SRC
   
- Answer:
  #+BEGIN_SRC haskell
:set +m 
let myLength :: [a] -> Int
    myLength [] = 0
    myLength (x:xs) = 1 + myLength xs
  
(myLength [1,2,3], myLength "Hello, world!")
  #+END_SRC

- Results:  (3,13)

** Reverse a list
- Example:
  #+BEGIN_SRC text
> myReverse "A man, a plan, a canal, panama!"
!amanap ,lanac a ,nalp a ,nam A
> myReverse [1,2,3,4]
  [4,3,2,1]
  #+END_SRC
  
- Answer:

  #+BEGIN_SRC haskell
:set +m 
let myReverse :: [a] -> [a]
    myReverse [x] = [x]
    myReverse (x:xs) = myReverse xs ++ [x]
  
(myReverse "A man, a plan, a canal, panama!", myReverse [1,2,3,4])
  #+END_SRC
  
- Results: ("!amanap ,lanac a ,nalp a ,nam A",[4,3,2,1])

** Find out whether a list is a palindrome. 
A palindrome can be read forward or backward; e.g. (x a m a x).

- Example:
  #+BEGIN_SRC text
> isPalindrome [1,2,3]
  False
> isPalindrome "madamimadam"
  True
> isPalindrome [1,2,3,4,3,2,1]
  True    
  #+END_SRC
  
- Answer:
  #+BEGIN_SRC haskell
:set +m
let isPalindrome :: (Eq a) => [a] -> Bool
    isPalindrome xs = reverse xs == xs

(isPalindrome [1,2,3], isPalindrome "mYm", isPalindrome [1,2,1])
  #+END_SRC

  #+RESULTS:
  : Prelude| Prelude| Prelude> (False,True,True)
  
- Result:  (False,True,True)

** Flatten a nested list structure.
Since we have to define a new data type, lists in Haskell are homogeneous,
see the following code.
- Example:
  #+BEGIN_SRC text
> flatten (Elem 5)
  [5]
> flatten (List [Elem 1, List [Elem 2, List [Elem 3, Elem 4], Elem 5]
  [1,2,3,4,5]
> flatten (List [])
  []
  #+END_SRC

- Answer:
  #+BEGIN_SRC haskell
data NestedList a = Elem a | List [NestedList a]
let flatten :: NestedList a ->  [a]
    flatten (Elem a) = [a]
    flatten 

flatten (List (Elem 1)) 
  #+END_SRC

  #+RESULTS:
  : Prelude| Prelude| Prelude> 
  : <interactive>:83:16:
  :     Couldn't match expected type `[NestedList a0]'
  :                 with actual type `NestedList a1'
  :     In the return type of a call of `Elem'
  :     In the first argument of `List', namely `(Elem 1)'
  :     In the first argument of `flatten', namely `(List (Elem 1))'

** TODO Eliminate consecutive duplicates of list elements

** TODO Pack consecutive duplicates of list elements into sublists.
If a list contains 

** TODO Run-length encoding of a list.
